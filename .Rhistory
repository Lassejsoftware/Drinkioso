#
# run that drinkioso dashboard
#
# display.mode="showcase"
#
.libPaths("c:/R_libs")
library(shiny)
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
names(mapLis)
names(mapList)
setwd("C:/Users/jqmt/Desktop/jens/drinkioso/")
#
library("leaflet")
#
# Copenhagen attempt
#
source("scoring.R")
source("makedfVenue.R")
source("createMapV3.R")
cph = readRDS("maps/cph.rds")
score = makedfScore()
#
mapList = createMap(score,cph, lambda = 600)
names(mapList)
#
score = mapList$score
score$col = "blue"
score$col[score$val>0] = "green"
scoreExp = mapList$scoreExp
BREAKS = c(seq(-40,40,by=10),-5,5,1,1,-0.1,0.1)
CL <- contourLines(unique(scoreExp$x) , unique(scoreExp$y) , mapList$mapImage, levels = BREAKS)
## EXTRACT CONTOUR LINE LEVELS
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
library("sp")
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col)
View(score)
score = makedfScore()
View(score)
`bagsvaerd-so_859150` <- readRDS("C:/Users/jqmt/Desktop/jens/drinkioso/venues/bagsvaerd-so_859150.rds")
View(`bagsvaerd-so_859150`)
getwd()
#
# quick fix to update venue names
#
#
venues = dir("venues/")
#
# quick fix to update venue names
#
#
rm(list = ls())
venues = dir("venues/")
new = data.frame()
new[1,1] = 2
new = data.frame()
i = venues[1]
ind = gregexpr(pattern = "_", text = i)
ind = gregexpr(pattern = "_", text = i)[[1]]
nchar(i)
name = substr(x = i, start = ind + 1, nchar(i))
temp = readRDS(paste0("venues/",i))
i
temp = readRDS(paste0("venues/",i))
ind = gregexpr(pattern = "_", text = i)[[1]]
name = substr(x = i, start = ind + 1, nchar(i))
saveRDS(object = temp, file = name)
file.remove(paste0("venue",i))
file.remove(paste0("venue/",i))
file.remove(paste0("venues/",i))
venues = dir("venues/")
new = data.frame()
venues = dir("venues/")
new = data.frame()
cc = 1
i = venues[1]
temp = readRDS(paste0("venues/",i))
ind = gregexpr(pattern = "_", text = i)[[1]]
name = substr(x = i, start = ind + 1, nchar(i))
new[cc,1] = name
(!(name %in% new[,1]))
new = data.frame()
!(name %in% new[,1])
new[1,1] = "start"
!(name %in% new[,1])
new[cc,1] = name
saveRDS(object = temp, file = name)
file.remove(paste0("venues/",i))
venues = dir("venues/")
new = data.frame()
new[1,1] = "start"
cc = 1
for (i in venues){
temp = readRDS(paste0("venues/",i))
ind = gregexpr(pattern = "_", text = i)[[1]]
name = substr(x = i, start = ind + 1, nchar(i))
if (!(name %in% new[,1])){
new[cc,1] = name
saveRDS(object = temp, file = name)
cc = cc + 1
}
file.remove(paste0("venues/",i))
}
`3124` <- readRDS("C:/Users/jqmt/Desktop/jens/drinkioso/venues/3124.rds")
View(`3124`)
#
# Copenhagen attempt
#
source("scoring.R")
source("makedfVenue.R")
source("createMapV3.R")
cph = readRDS("maps/cph.rds")
score = makedfScore()
View(score)
getVenueCheckIn <- function(){
hists = dir("checkinHist/")
cc = 1
for (i in hists){
if (cc == 1){
tot = readRDS(paste0("checkinHist/",i))
cc = cc + 1
} else {
temp = readRDS(paste0("checkinHist/",i))
tot = rbind(tot,temp)
}
}
return(tot)
}
#
tot = getVenueCheckIn()
View(tot)
tot = subset(tot, !is.na(tot$venue_name))
temp = unique(tot[,c("venue_slug","venue_name")])
View(temp)
aggTot = aggregate(venue_slug ~ user_name + venue_name + venue_id, data = tot, length)
View(aggTot)
aggTot = aggregate(venue_id ~ user_name, data = tot, length)
View(aggTot)
aggTot = aggregate(user_name ~ venue_id, data = tot, length)
View(aggTot)
aggTot = aggregate(user_name ~ venue_id + user_name, data = tot, length)
aggTot = aggregate(tot$venue_id, by = list(user_name = tot$user_name), length)
View(aggTot)
aggTot = aggregate(tot$venue_id, by = list(user_name = tot$user_name,
id = tot$venue_id), length)
View(aggTot)
temp = unique(tot[,c("venue_id","venue_name")])
aggTot = aggregate(tot$venue_id, by = list(user_name = tot$user_name,
venue_id = tot$venue_id), length)
View(temp)
temp = temp[order(temp$venue_id)]
temp = temp[order(temp$venue_id),]
View(temp)
test = duplicated(temp$venue_id)
sum(test)
temp = unique(tot[,c("venue_id","venue_name")])
temp = temp[!duplicated(temp$venue_id),]
aggTot = aggregate(count = tot$venue_id, by = list(user_name = tot$user_name,
venue_id = tot$venue_id), length)
aggTot = aggregate(list(count = tot$venue_id), by = list(user_name = tot$user_name,
venue_id = tot$venue_id), length)
View(aggTot)
temp = unique(tot[,c("venue_id","venue_name")])
temp = temp[!duplicated(temp$venue_id),]
aggTot = aggregate(list(count = tot$venue_id), by = list(user_name = tot$user_name,
venue_id = tot$venue_id), length)
aggTot = merge(aggTot, temp, by = "venue_id", all.x = T)
View(aggTot)
spreadTot = spread(aggTot, key = user_name, value = count)
spreadTot[is.na(spreadTot)] = 0
View(spreadTot)
#
dfVenue = makedfVenue()
View(dfVenue)
spreadTot = merge(spreadTot,dfVenue, by = "venue_id", all.x = T)
View(spreadTot)
#
score = na.omit(spreadTot)
names(score)[names(score) == "lng"] = "lon"
score$val = score$Garbacz + score$hellegskov- score$Slendrick - score$knoe1703 - score$camillask
#
# Copenhagen attempt
#
source("scoring.R")
score = makedfScore()
View(score)
#
mapList = createMap(score,cph, lambda = 600)
source("createMapV3.R")
#
mapList = createMap(score,cph, lambda = 600)
#
score = mapList$score
score$col = "blue"
score$col[score$val>0] = "green"
scoreExp = mapList$scoreExp
BREAKS = c(seq(-40,40,by=10),-5,5,1,1,-0.1,0.1)
CL <- contourLines(unique(scoreExp$x) , unique(scoreExp$y) , mapList$mapImage, levels = BREAKS)
## EXTRACT CONTOUR LINE LEVELS
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 0.5, col = score$col)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1.5, col = score$col)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], opacity = 1) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col)
# With bars
leaflet(spgons) %>% addTiles(opacity = 1) %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addMarkers(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col)
# With bars v2
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addMarkers(lng = score$lon, lat = score$lat,
col = score$col)
# With bars v2
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addMarkers(lng = score$lon, lat = score$lat,
)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fill = score$col)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = score$venue_id)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$venue_id,HTML))
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$venue_name,HTML))
View(score)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(as.character(score$venue_name),HTML))
score$label = paste0(score$venue_name,"<br>","test")
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML))
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = wellPanel(lapply(score$label,HTML)))
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML))
# Make labels
users = dir("checkinHist/")
users = gsub("\\..*", "", users)
team = ifelse(score$val>0, "Green", "Blue")
inds = which(names(score) %in% users)
drinker = names(which.max(score[,inds]))
inds
which.max(score[,inds])
inds
test = lapply(score[,inds], which.max)
test$camillask
unlist(test)
test = lapply(t(score[,inds]), which.max)
dim(score)
test[1]
test[1]
View(test)
test = lapply(t(score[,inds]), max.col)
test = lapply(score[,inds], max.col)
test = lapply(score[,inds], max.row)
test = which.max(score[,c(3,4)])
names(which.max(score[1,inds]))
score[1,]
drinker = c()
for (i in 1:dim(score)[1]){
drinker[i] = names(which.max(score[i,inds]))
}
team = ifelse(score$val>0, "Green", "Blue")
inds = which(names(score) %in% users)
drinker = c()
num = c()
for (i in 1:dim(score)[1]){
drinker[i] = names(which.max(score[i,inds]))
num[i] = max(score[i,inds])
}
label = paste0("<b> Venue: </b>", score$venue_name, " owned by team <b>", team,  "</b> <br/>",
"<b> Venue score is:  </b>", abs(score$val) , "<br/>",
"<b> Best team player: </b>", drinker, " with ", num, " beers!"
)
score$label = label
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML))
View(score)
grep(pattern = "have", score$venue_name)
Garbacz <- readRDS("C:/Users/jqmt/Desktop/jens/drinkioso/checkinHist/Garbacz.rds")
which(Garbacz$venue_id == 3124)
?heat.colors
NLEV
LEVS
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = viridis(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML))
viridis(NLEV)heat.colors(NLEV, NULL)[LEVS]
heat.colors(NLEV, NULL)[LEVS]
grep(pattern = "Trib", Garbacz$venue_name)
HTML
paste8
?HTML
HTML("test")
HTML("test", size=1)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML),
textsize = "15px")
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML),
labelOptions = list(textsize = "15px"))
names(scoreExp)
max(scoreExp$x)
max(score$lat)
max(score$lon)
#
mapList = createMap(score,cph, lambda = 500)
#
score = mapList$score
score$col = "blue"
score$col[score$val>0] = "green"
scoreExp = mapList$scoreExp
# Make labels
users = dir("checkinHist/")
users = gsub("\\..*", "", users)
team = ifelse(score$val>0, "Green", "Blue")
inds = which(names(score) %in% users)
drinker = c()
num = c()
for (i in 1:dim(score)[1]){
drinker[i] = names(which.max(score[i,inds]))
num[i] = max(score[i,inds])
}
label = paste0("<b> Venue: </b>", score$venue_name, " owned by team <b>", team,  "</b> <br/>",
"<b> Venue score is:  </b>", abs(score$val) , "<br/>",
"<b> Best team player: </b>", drinker, " with ", num, " beers!"
)
score$label = label
BREAKS = c(seq(-40,40,by=10),-5,5,1,1,-0.1,0.1)
CL <- contourLines(unique(scoreExp$x) , unique(scoreExp$y) , mapList$mapImage, levels = BREAKS)
## EXTRACT CONTOUR LINE LEVELS
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML),
labelOptions = list(textsize = "15px"))
#
mapList = createMap(score,cph, lambda = 650)
#
score = mapList$score
score$col = "blue"
score$col[score$val>0] = "green"
scoreExp = mapList$scoreExp
# Make labels
users = dir("checkinHist/")
users = gsub("\\..*", "", users)
team = ifelse(score$val>0, "Green", "Blue")
inds = which(names(score) %in% users)
drinker = c()
num = c()
for (i in 1:dim(score)[1]){
drinker[i] = names(which.max(score[i,inds]))
num[i] = max(score[i,inds])
}
label = paste0("<b> Venue: </b>", score$venue_name, " owned by team <b>", team,  "</b> <br/>",
"<b> Venue score is:  </b>", abs(score$val) , "<br/>",
"<b> Best team player: </b>", drinker, " with ", num, " beers!"
)
score$label = label
BREAKS = c(seq(-40,40,by=10),-5,5,1,1,-0.1,0.1)
CL <- contourLines(unique(scoreExp$x) , unique(scoreExp$y) , mapList$mapImage, levels = BREAKS)
## EXTRACT CONTOUR LINE LEVELS
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
# With bars
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS], fillOpacity = 0.5) %>%
addCircles(lng = score$lon, lat = score$lat,
radius = abs(score$val), opacity = 1, col = score$col, fillOpacity = 1, label = lapply(score$label,HTML),
labelOptions = list(textsize = "15px"))
hist(score$val)
mean(score$val)
hist(scoreExp$val)
mean(scoreExp$val)
