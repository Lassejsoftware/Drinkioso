#
# run that drinkioso dashboard
#
# display.mode="showcase"
#
.libPaths("c:/R_libs")
#
# 03-09-2018
#
# Script which checks for updates of user against a file in checkinHist
# This should be run from a bat file with a timer.
#
.libPaths("c:/R_libs")
path = "C:/Users/jqmt/Desktop/jens/drinkioso/"
setwd(path)
#
rm(list = ls())
# functions
source("extra/getUsers.R")
source("userHistoryV3.R")
#
users = getUsers()
#
for (i in users){
print(i)
getUserHist(user = i, wTime = 10)
}
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
library(shiny)
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
install.packages("curl")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
install.packages("sp")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
#
for (i in users){
print(i)
getUserHist(user = i, wTime = 10)
}
i
users
users = subset(users, !(users %in% noUsers))
#
noUsers = c("Merrillr")
users = getUsers()
users = subset(users, !(users %in% noUsers))
#
for (i in users){
print(i)
getUserHist(user = i, wTime = 10)
}
cph
dfVenue = makedfVenue(map = NULL)
dfVenue = makedfVenue(map = cph)
View(dfVenue)
venues = dir("venues")
i = venues[]
i = venues[1]
temp = readRDS(paste0("venues/",i))
temp$categories
temp$categories$items$category_name
# venues = dir("venues")
# for (i in venues){
#   temp = readRDS(paste0("venues/",i))
#   print(temp$categories$items$category_name)
#   Sys.sleep(2)
# }
bleh <- function(i){
temp = readRDS(paste0("venues/",i))
temp$categories$items$category_name
}
bleh(venues)
bleh(venues[1])
bleh(venues[2])
bleh(venues[3])
test = lapply(venues, bleh)
test = unlist(test)
test = sapply(venues, bleh)
test = lapply(venues, bleh)
test = unique(unlist(lapply(venues, bleh)))
test = lapply(venues, bleh) %>% unlist %>% unique %>% sort
test = data.frame(cats = test)
View(test)
multiplyer = list("Brewery" = 2,
"bar|pub|gastropub|beer|restaurent|Lounge|Bistro|Cocktail|Bodega|Hotel|Nightclub|Resort|Winery" = 1,
"residence|Home" = 0.5,
"Outdoors|park|beach|Plaza|Racetrack|River|Train" = 0.25)
multiplyer
sort(multiplyer)
sapply(multiplyer,   function(cs){cs})
sort(sapply(multiplyer,   function(cs){cs}))
#
# 10-09-2018
#
# Make a df with venue info. This is nothing but a draft.
#
makedfVenue <- function(map = NULL){
venues = dir("venues")
dfVenue = data.frame()
cc = 1
# From low to high
multiplyer = list("Outdoors|park|beach|Plaza|Racetrack|River|Train" = 0.25,
"residence|Home" = 0.5,
"bar|pub|gastropub|beer|restaurent|Lounge|Bistro|Cocktail|Bodega|Hotel|Nightclub|Resort|Winery" = 1,
"Brewery" = 2
)
for (i in venues){
temp = readRDS(paste0("venues/",i))
#
dfVenue[cc, "venue_id"] = temp$venue_id
dfVenue[cc, "total_count"] = temp$stats$total_count
dfVenue[cc, "total_user_count"] = temp$stats$total_user_count
dfVenue[cc, "lat"] = temp$location$lat
dfVenue[cc, "lng"] = temp$location$lng
dfVenue[cc, "isBar"] = sum(grepl(pattern = "bar|pub|Brewery|Gastropub|Beer|restaurant", x = temp$categories, ignore.case = T))>0
#
# for (j in names(multiplyer)){
#   if (sum(grepl(pattern = j, x = temp$categories, ignore.case = T))>0){
#     dfVenue[cc, "multiplyer"] = multiplyer[[j]]
#   }
# }
cc = cc + 1
}
names(dfVenue)[names(dfVenue) == "lng"] = "lon"
if (!is.null(map)){
# This only work for some cph map.
lims = attr(map,"bb")
dfVenue = subset(dfVenue, dfVenue$lat>lims$ll.lat & dfVenue$lat<lims$ur.lat & dfVenue$lon>lims$ll.lon & dfVenue$lon<lims$ur.lon)
}
return(dfVenue)
}
t1 = Sys.time()
test = makedfVenue(map = cph)
t2 = Sys.time()
t2 - t1
#
# 10-09-2018
#
# Make a df with venue info. This is nothing but a draft.
#
makedfVenue <- function(map = NULL){
venues = dir("venues")
dfVenue = data.frame()
cc = 1
# From low to high
multiplyer = list("Outdoors|park|beach|Plaza|Racetrack|River|Train" = 0.25,
"residence|Home" = 0.5,
"bar|pub|gastropub|beer|restaurent|Lounge|Bistro|Cocktail|Bodega|Hotel|Nightclub|Resort|Winery" = 1,
"Brewery" = 2
)
for (i in venues){
temp = readRDS(paste0("venues/",i))
#
dfVenue[cc, "venue_id"] = temp$venue_id
dfVenue[cc, "total_count"] = temp$stats$total_count
dfVenue[cc, "total_user_count"] = temp$stats$total_user_count
dfVenue[cc, "lat"] = temp$location$lat
dfVenue[cc, "lng"] = temp$location$lng
dfVenue[cc, "isBar"] = sum(grepl(pattern = "bar|pub|Brewery|Gastropub|Beer|restaurant", x = temp$categories, ignore.case = T))>0
#
for (j in names(multiplyer)){
if (sum(grepl(pattern = j, x = temp$categories, ignore.case = T))>0){
dfVenue[cc, "multiplyer"] = multiplyer[[j]]
}
}
cc = cc + 1
}
names(dfVenue)[names(dfVenue) == "lng"] = "lon"
if (!is.null(map)){
# This only work for some cph map.
lims = attr(map,"bb")
dfVenue = subset(dfVenue, dfVenue$lat>lims$ll.lat & dfVenue$lat<lims$ur.lat & dfVenue$lon>lims$ll.lon & dfVenue$lon<lims$ur.lon)
}
return(dfVenue)
}
t1 = Sys.time()
test = makedfVenue(map = cph)
t2 = Sys.time()
t2 - t1
View(test)
#
# 10-09-2018
#
# Make a df with venue info. This is nothing but a draft.
#
makedfVenue <- function(map = NULL){
venues = dir("venues")
dfVenue = data.frame()
cc = 1
defaultVal = 0.5
# From low to high
multiplyer = list("Outdoors|park|beach|Plaza|Racetrack|River|Train" = 0.25,
"residence|Home" = 0.5,
"bar|pub|gastropub|beer|restaurent|Lounge|Bistro|Cocktail|Bodega|Hotel|Nightclub|Resort|Winery" = 1,
"Brewery" = 2
)
for (i in venues){
temp = readRDS(paste0("venues/",i))
#
dfVenue[cc, "venue_id"] = temp$venue_id
dfVenue[cc, "total_count"] = temp$stats$total_count
dfVenue[cc, "total_user_count"] = temp$stats$total_user_count
dfVenue[cc, "lat"] = temp$location$lat
dfVenue[cc, "lng"] = temp$location$lng
dfVenue[cc, "isBar"] = sum(grepl(pattern = "bar|pub|Brewery|Gastropub|Beer|restaurant", x = temp$categories, ignore.case = T))>0
#
for (j in names(multiplyer)){
if (sum(grepl(pattern = j, x = temp$categories, ignore.case = T))>0){
dfVenue[cc, "multiplyer"] = multiplyer[[j]]
}
}
cc = cc + 1
}
names(dfVenue)[names(dfVenue) == "lng"] = "lon"
if (!is.null(map)){
# This only work for some cph map.
lims = attr(map,"bb")
dfVenue = subset(dfVenue, dfVenue$lat>lims$ll.lat & dfVenue$lat<lims$ur.lat & dfVenue$lon>lims$ll.lon & dfVenue$lon<lims$ur.lon)
}
dfVenue[is.na(dfVenue$multiplyer)] = defaultVal
return(dfVenue)
}
t1 = Sys.time()
test = makedfVenue(map = cph)
t2 = Sys.time()
t2 - t1
#
# 10-09-2018
#
# Make a df with venue info. This is nothing but a draft.
#
makedfVenue <- function(map = NULL){
venues = dir("venues")
dfVenue = data.frame()
cc = 1
defaultVal = 0.5
# From low to high
multiplyer = list("Outdoors|park|beach|Plaza|Racetrack|River|Train" = 0.25,
"residence|Home" = 0.5,
"bar|pub|gastropub|beer|restaurent|Lounge|Bistro|Cocktail|Bodega|Hotel|Nightclub|Resort|Winery" = 1,
"Brewery" = 2
)
for (i in venues){
temp = readRDS(paste0("venues/",i))
#
dfVenue[cc, "venue_id"] = temp$venue_id
dfVenue[cc, "total_count"] = temp$stats$total_count
dfVenue[cc, "total_user_count"] = temp$stats$total_user_count
dfVenue[cc, "lat"] = temp$location$lat
dfVenue[cc, "lng"] = temp$location$lng
dfVenue[cc, "isBar"] = sum(grepl(pattern = "bar|pub|Brewery|Gastropub|Beer|restaurant", x = temp$categories, ignore.case = T))>0
#
for (j in names(multiplyer)){
if (sum(grepl(pattern = j, x = temp$categories, ignore.case = T))>0){
dfVenue[cc, "multiplyer"] = multiplyer[[j]]
}
}
cc = cc + 1
}
names(dfVenue)[names(dfVenue) == "lng"] = "lon"
if (!is.null(map)){
# This only work for some cph map.
lims = attr(map,"bb")
dfVenue = subset(dfVenue, dfVenue$lat>lims$ll.lat & dfVenue$lat<lims$ur.lat & dfVenue$lon>lims$ll.lon & dfVenue$lon<lims$ur.lon)
}
dfVenue$multiplyer[is.na(dfVenue$multiplyer)] = defaultVal
return(dfVenue)
}
t1 = Sys.time()
test = makedfVenue(map = cph)
t2 = Sys.time()
t2 - t1
View(test)
hist(test$multiplyer)
#
# 05-09-2018
# Some scoring algo.
#
# Ideas: Count: unique, badges.
#
# dep makedfVenue.R
#
#
makedfScore <- function(startDate = NULL, map = NULL, isBar = F, multi = T){
#
tot = getVenueCheckIn()
# tot$created_at2 = as.Date( substr( tot$created_at,6, 16), format = "%d %b %Y")
tot = subset(tot, !is.na(tot$venue_name))
tot$time = untappd2POSIXct(tot$created_at)
# Start date of drinkioso
print(dim(tot))
if (class(startDate)[1] == "POSIXct"){
tot = subset(tot, tot$time > startDate)
}
print(startDate)
print(dim(tot))
# Join date for user
users = getUsers()
for (i in users){
userInfo = readRDS(paste0("users/",i,".rds") )
joinDate = userInfo$joinDate
if (!is.null(joinDate)){
vec = tot$user_name == i & tot$time<joinDate
tot = tot[!vec,]
}
}
temp = unique(tot[,c("venue_id","venue_name")])
temp = temp[!duplicated(temp$venue_id),]
aggTot = aggregate(list(count = tot$venue_id), by = list(user_name = tot$user_name,
venue_id = tot$venue_id), length)
aggTot = merge(aggTot, temp, by = "venue_id", all.x = T)
spreadTot = spread(aggTot, key = user_name, value = count)
spreadTot[is.na(spreadTot)] = 0
#
dfVenue = makedfVenue(map = map)
spreadTot = merge(spreadTot,dfVenue, by = "venue_id", all.x = T)
#
score = na.omit(spreadTot)
if (isBar){
score = subset(score, score$isBar)
}
names(score)[names(score) == "lng"] = "lon"
val = vector(mode = "numeric", length = nrow(score))
for (i in users){
if (i %in% names(score)){
const = getTeam(i,opts = "num")
val = score[[i]]*const + val
}
}
score$val = val
if (multi){
score$val = score$val * score$multiplyer
}
# Add team colours
score$col = getTeam(val = score$val)
#
return(score)
}
score = makedfScore(map = cph)
View(score)
which(score$multiplyer == 2)
score$venue_name[which(score$multiplyer == 2)]
#
# 10-09-2018
#
# Make a df with venue info. This is nothing but a draft.
#
makedfVenue <- function(map = NULL){
venues = dir("venues")
dfVenue = data.frame()
cc = 1
defaultVal = 0.5
# From low to high
multiplyer = list("Outdoors|park|beach|Plaza|Racetrack|River|Train" = 0.25,
"residence|Home" = 0.5,
"bar|pub|gastropub|beer|restaurent|Lounge|Bistro|Cocktail|Bodega|Hotel|Nightclub|Resort|Winery" = 1,
"Brewery" = 2
)
for (i in venues){
temp = readRDS(paste0("venues/",i))
#
dfVenue[cc, "venue_id"] = temp$venue_id
dfVenue[cc, "total_count"] = temp$stats$total_count
dfVenue[cc, "total_user_count"] = temp$stats$total_user_count
dfVenue[cc, "lat"] = temp$location$lat
dfVenue[cc, "lng"] = temp$location$lng
dfVenue[cc, "isBar"] = sum(grepl(pattern = "bar|pub|Brewery|Gastropub|Beer|restaurant", x = temp$categories, ignore.case = T))>0
#
for (j in names(multiplyer)){
if (sum(grepl(pattern = j, x = temp$categories, ignore.case = T))>0){
dfVenue[cc, "multiplyer"] = multiplyer[[j]]
}
}
cc = cc + 1
}
names(dfVenue)[names(dfVenue) == "lng"] = "lon"
if (!is.null(map)){
# This only work for some cph map.
lims = attr(map,"bb")
dfVenue = subset(dfVenue, dfVenue$lat>lims$ll.lat & dfVenue$lat<lims$ur.lat & dfVenue$lon>lims$ll.lon & dfVenue$lon<lims$ur.lon)
}
dfVenue$multiplyer[is.na(dfVenue$multiplyer)] = defaultVal
dfVenue$multiplyer[dfVenue$venue_id == 2339990] = defaultVal
return(dfVenue)
}
score = makedfScore(map = cph)
which(score$multiplyer == 2)
#
rm(list = ls())
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
log(0.1)
log(0.1+1)
log(0.1-1)
plot(log)
plot(log(1:10))
plot(log((1:10) - 1))
plot(log((1:10) + 1))
x = 1:10
plot(x,log(x-1))
plot(x,log(x+1))
x = 0:10
plot(x,log(x+1))
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
0.5^0.5
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
i
venues = dir("venues")
i = venues[1]
temp = readRDS(paste0("venues/",i))
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
temp$categories$items$category_name[1]
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
