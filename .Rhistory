#
# 07-12-2017
# JQMT
#
.libPaths("c:/R_libs")
#
# 07-12-2017
# JQMT
#
.libPaths("c:/R_libs")
#
# UI
library(shiny)
?plotOutput
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
#wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
#wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderPlot({
plot(rnorm(200), rnorm(200))
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
# hover = hoverOpts(
#   id = "image_hover",
#   delay = 500,
#   delayType = "throttle"
# ),
#brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
#wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderPlot({
plot(rnorm(200), rnorm(200))
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shinyOptions(cache = diskCache("./cache-dir"))
shinyOptions(cache = diskCache("./cache-dir"))
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
# hover = hoverOpts(
#   id = "image_hover",
#   delay = 500,
#   delayType = "throttle"
# ),
#brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
#wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
# output$image <- renderPlot({
#
#   plot(rnorm(200), rnorm(200))
#
# })
output$image <- renderCachedPlot({
plot(rnorm(200), rnorm(200))
}, cacheKeyExpr = list("bleh"))
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
getwd()
dir
dir()
dir("cache-dir/")
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
# hover = hoverOpts(
#   id = "image_hover",
#   delay = 500,
#   delayType = "throttle"
# ),
#brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(radioButtons(inputId = "type", label = "plot type", choices = c(1,2))),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
# output$image <- renderPlot({
#
#   plot(rnorm(200), rnorm(200))
#
# })
output$image <- renderCachedPlot({
req(input$type)
if (input$type == 1){
plot(rnorm(200), rnorm(200))
} else {
plot(runif(200), runif(200))
}
}, cacheKeyExpr = list("bleh"))
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
# hover = hoverOpts(
#   id = "image_hover",
#   delay = 500,
#   delayType = "throttle"
# ),
#brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(radioButtons(inputId = "type", label = "plot type", choices = c(1,2))),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
# output$image <- renderPlot({
#
#   plot(rnorm(200), rnorm(200))
#
# })
output$image <- renderCachedPlot({
req(input$type)
if (input$type == 1){
plot(rnorm(200), rnorm(200))
} else {
plot(runif(200), runif(200))
}
}, cacheKeyExpr = list(input$type))
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
#
# run that drinkioso dashboard
#
# display.mode="showcase"
#
.libPaths("c:/R_libs")
library(shiny)
setwd("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
list(1,2,3)
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
getwd()
dir()
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
img()
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
rm(dir("myapp-cache/", full.names = T))
dir("myapp-cache/", full.names = T)
?rm
del
file.remove(dir("myapp-cache/",full.names = T))
#
rm(list = ls())
source("userStats/trophyWrapper.R")
source("userStats/calcWarrior.R")
source("userStats/calcColumbus.R")
source("userStats/trophyWrapper.R")
source("userStats/calcWarrior.R")
source("userStats/calcColumbus.R")
# Recalc user stats
trophies = trophyWrapper(opts = "trophies")
startDate = as.POSIXct("01 jan 2018", format = "%d %b %Y")
saveRDS("extra/data/startDate.rds")
saveRDS(startDate, "extra/data/startDate.rds")
str(startDate)
rm(startDate)
test = readRDS("extra/data/startDate.rds")
str(test)
rm(list = ls())
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
runApp("C:/Users/jqmt/Desktop/jens/drinkioso/")
.libPaths()
#
# 03-09-2018
#
# Script which checks for updates of user against a file in checkinHist
# This should be run from a bat file/ cron job with a timer.
# Todo: fix path
#
.libPaths(c("/home/shiny/R_libs","c:/R_libs", .libPaths())) # libs on aws
.libPaths()
